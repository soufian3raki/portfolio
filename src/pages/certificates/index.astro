---
import Layout from '../../layouts/Layout.astro';
import { getCollection } from 'astro:content';

const certificates = await getCollection('certificates');
const sortedCertificates = certificates.sort((a, b) => new Date(b.data.date).getTime() - new Date(a.data.date).getTime());

// Obtener categorías únicas para los filtros
const categories = [...new Set(certificates.flatMap(cert => Array.isArray(cert.data.category) ? cert.data.category : [cert.data.category]))];
const types = [...new Set(certificates.map(cert => cert.data.type))];
const issuers = [...new Set(certificates.map(cert => cert.data.issuer))];

// Obtener todos los skills únicos
const allSkills = [...new Set(certificates.flatMap(cert => cert.data.skills))];

// Pasar todos los datos al cliente para paginación del lado del cliente
const certificatesData = sortedCertificates.map(cert => ({
    id: cert.id,
    slug: cert.slug,
    title: cert.data.title,
    title_es: cert.data.title_es,
    description: cert.data.description,
    description_es: cert.data.description_es,
    image: cert.data.image,
    category: cert.data.category,
    category_es: cert.data.category_es,
    type: cert.data.type,
    type_es: cert.data.type_es,
    issuer: cert.data.issuer,
    issuer_es: cert.data.issuer_es,
    date: cert.data.date,
    skills: cert.data.skills,
    credential_id: cert.data.credential_id,
    credential_url: cert.data.credential_url,
    pdf_url: cert.data.pdf_url,
    duration: cert.data.duration,
    duration_es: cert.data.duration_es,
    study_hours: cert.data.study_hours,
    study_hours_es: cert.data.study_hours_es,
    content_covered: cert.data.content_covered,
    content_covered_es: cert.data.content_covered_es,
    learning_outcomes: cert.data.learning_outcomes,
    learning_outcomes_es: cert.data.learning_outcomes_es
}));
---

<Layout title="Certificados - Soufiane Raki">
    <main class="main-content">
        <section class="certificates">
            <h1 class="title">Certificados y Estudios</h1>
            
            <!-- Filtros -->
            <div class="filters">
                <div class="filter-group">
                    <label for="categoryFilter" class="filter-label-category">Categoría:</label>
                    <select id="categoryFilter" class="filter-select">
                        <option value="" class="filter-option-all">Todas las categorías</option>
                        {categories.map(category => (
                            <option value={category}>{category}</option>
                        ))}
                    </select>
                </div>
                
                <div class="filter-group">
                    <label for="typeFilter" class="filter-label-type">Tipo:</label>
                    <select id="typeFilter" class="filter-select">
                        <option value="" class="filter-option-all">Todos los tipos</option>
                        {types.map(type => (
                            <option value={type}>
                                {type === 'professional-certificate' ? 'Certificado Profesional' : 'Certificación'}
                            </option>
                        ))}
                    </select>
                </div>
                
                <div class="filter-group">
                    <label for="issuerFilter" class="filter-label-issuer">Emisor:</label>
                    <select id="issuerFilter" class="filter-select">
                        <option value="" class="filter-option-all">Todos los emisores</option>
                        {issuers.map(issuer => (
                            <option value={issuer}>{issuer}</option>
                        ))}
                    </select>
                </div>
                
                <div class="filter-group">
                    <label for="skillFilter" class="filter-label-skill">Habilidad:</label>
                    <select id="skillFilter" class="filter-select">
                        <option value="" class="filter-option-all">Todas las habilidades</option>
                        {allSkills.map(skill => (
                            <option value={skill}>{skill}</option>
                        ))}
                    </select>
                </div>
                
                <button id="clearFilters" class="btn btn-secondary clear-filters-btn">Limpiar Filtros</button>
            </div>

            <!-- Estadísticas -->
            <div class="stats" id="statsContainer">
                <div class="stat-card">
                    <h3 id="totalCertificates">{certificates.length}</h3>
                    <p class="stat-total-certificates">Total Certificados</p>
                </div>
                  <div class="stat-card">
                      <h3 id="totalDegrees">{certificates.filter(cert => cert.data.type === 'professional-certificate').length}</h3>
                      <p class="stat-degrees">Certificado Profesional </p>
                  </div>
                <div class="stat-card">
                    <h3 id="totalCertifications">{certificates.filter(cert => cert.data.type === 'certification').length}</h3>
                    <p class="stat-certifications">Certificaciones</p>
                </div>
                <div class="stat-card">
                    <h3 id="totalCategories">{categories.length}</h3>
                    <p class="stat-categories">Categorías</p>
                </div>
            </div>

            <!-- Contador de certificados -->
            <div class="certificates-counter">
                <i class="fas fa-certificate"></i>
                <span class="counter-text" id="certificatesCounter">
                    Cargando certificados...
                                </span>
                            </div>
                            
            <!-- Grid de certificados -->
            <div class="certificates-grid" id="certificatesGrid"></div>
            
            <!-- Paginación -->
            <div id="paginationContainer" class="pagination-container" style="display: none;">
                <div class="pagination-info">
                    <span class="pagination-text" id="paginationInfo">
                        Página 1 de 1
                                </span>
                            </div>
                <nav class="pagination" aria-label="Navegación de páginas" id="paginationNav">
                    <div class="pagination-numbers" id="paginationNumbers"></div>
                </nav>
            </div>
            
            <!-- Mensaje cuando no hay resultados -->
            <div id="noResults" class="no-results" style="display: none;">
                <i class="fas fa-search"></i>
                <h3 class="no-results-title">No se encontraron certificados</h3>
                <p class="no-results-message">Intenta ajustar los filtros para ver más resultados.</p>
            </div>
        </section>
    </main>

    <!-- Modal de Certificado -->
    <div id="certificateModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 id="modalTitle" class="modal-title-text">Título del Certificado</h2>
                <button class="close-btn" onclick="closeCertificateModal()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            
            <div class="modal-body">
                <div class="modal-image">
                    <img id="modalImage" src="" alt="" class="modal-image-clickable" />
                </div>
                
                <div class="modal-info">
                    <div class="info-section">
                        <h3 class="modal-section-title">Información General</h3>
                        <div class="info-grid">
                            <div class="info-item">
                                <strong class="modal-label-issuer">Emisor:</strong>
                                <span id="modalIssuer"></span>
                            </div>
                            <div class="info-item">
                                <strong class="modal-label-date">Fecha:</strong>
                                <span id="modalDate"></span>
                            </div>
                            <div class="info-item">
                                <strong class="modal-label-category">Categoría:</strong>
                                <span id="modalCategory"></span>
                            </div>
                            <div class="info-item">
                                <strong class="modal-label-type">Tipo:</strong>
                                <span id="modalType"></span>
                            </div>
                            <div class="info-item" id="modalDuration" style="display: none;">
                                <strong class="modal-label-duration">Duración:</strong>
                                <span id="modalDurationValue"></span>
                            </div>
                            <div class="info-item" id="modalHours" style="display: none;">
                                <strong class="modal-label-hours">Horas de Estudio:</strong>
                                <span id="modalHoursValue"></span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="info-section">
                        <h3 class="modal-section-title">Descripción</h3>
                        <p id="modalDescription"></p>
                    </div>
                    
                    <div class="info-section" id="modalContent" style="display: none;">
                        <h3 class="modal-section-title">Contenido Estudiado</h3>
                        <ul id="modalContentList"></ul>
                    </div>
                    
                    <div class="info-section" id="modalOutcomes" style="display: none;">
                        <h3 class="modal-section-title">Resultados de Aprendizaje</h3>
                        <ul id="modalOutcomesList"></ul>
                    </div>
                    
                    <div class="info-section">
                        <h3 class="modal-section-title">Habilidades Adquiridas</h3>
                        <div id="modalSkills" class="skills-container"></div>
                    </div>
                    
                    <div class="info-section" id="modalCredential" style="display: none;">
                        <h3 class="modal-section-title">Credencial</h3>
                        <p><strong class="modal-label-credential-id">ID:</strong> <span id="modalCredentialId"></span></p>
                        <a id="modalCredentialLink" href="#" target="_blank" class="credential-link">
                            <i class="fas fa-external-link-alt"></i>
                            <span class="view-credential-text">Ver Credencial Online</span>
                        </a>
                    </div>
                </div>
            </div>
            
            <div class="modal-footer">
                <div class="modal-actions">
                    <a id="modalPdfLink" href="#" target="_blank" class="btn btn-primary" style="display: none;">
                        <i class="fas fa-file-pdf"></i>
                        <span class="download-pdf-text">Descargar PDF</span>
                    </a>
                    <a id="modalCredentialLinkFooter" href="#" target="_blank" class="btn btn-secondary" style="display: none;">
                        <i class="fas fa-external-link-alt"></i>
                        <span class="view-credential-footer-text">Ver Credencial</span>
                    </a>
                    <button class="btn btn-secondary close-modal-btn" onclick="closeCertificateModal()">
                        <span class="close-modal-text">Cerrar</span>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal de Imagen Ampliada -->
    <div id="imageModal" class="image-modal">
        <div class="image-modal-content">
            <span class="image-modal-close">&times;</span>
            <img id="expandedImage" src="" alt="" />
        </div>
    </div>
</Layout>

<style is:global>
    .certificates {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem;
    }

    .filters {
        display: flex;
        gap: 1rem;
        margin-bottom: 2rem;
        padding: 1.5rem;
        background: var(--card-bg);
        border-radius: 12px;
        border: 1px solid var(--border);
        flex-wrap: wrap;
        align-items: end;
    }

    .filter-group {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
        min-width: 150px;
    }

    .filter-group label {
        font-weight: 500;
        color: var(--text);
        font-size: 0.9rem;
    }

    .filter-select {
        padding: 0.5rem;
        background: var(--background);
        border: 1px solid var(--border);
        border-radius: 6px;
        color: var(--text);
        font-size: 0.9rem;
    }

    [data-theme="dark"] .filter-select {
        background-color: #16213e;
    }

    .filter-select:focus {
        outline: none;
        border-color: var(--accent);
    }

    .stats {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: 1rem;
        margin-bottom: 2rem;
    }

    .stat-card {
        background: var(--card-bg);
        padding: 1.5rem;
        border-radius: 12px;
        text-align: center;
        border: 1px solid var(--border);
    }

    .stat-card h3 {
        font-size: 2rem;
        color: var(--accent);
        margin-bottom: 0.5rem;
    }

    .stat-card p {
        color: var(--text-muted);
        font-size: 0.9rem;
    }

    .certificates-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
        gap: 2rem;
    }

    .certificate-card {
        background: var(--card-bg);
        border-radius: 16px;
        overflow: hidden;
        transition: all 0.3s ease;
        border: 1px solid var(--border);
        cursor: pointer;
    }

    .certificate-card:hover {
        transform: translateY(-5px);
        border-color: var(--accent);
    }

    .certificate-image {
        position: relative;
        height: 180px;
        overflow: hidden;
        display: flex;
        align-items: center;
        justify-content: center;
        background: var(--background-glass);
        border-radius: 8px 8px 0 0;
    }

    .certificate-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        object-position: center;
        transition: transform 0.3s ease;
        filter: brightness(0.95) contrast(1.05);
    }

    .certificate-card:hover .certificate-image img {
        transform: scale(1.05);
        filter: brightness(1) contrast(1.1);
    }

    .certificate-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,122,255,0.9);
        display: flex;
        align-items: center;
        justify-content: center;
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .certificate-card:hover .certificate-overlay {
        opacity: 1;
    }

    .certificate-actions {
        display: flex;
        gap: 1rem;
    }

    .certificate-link {
        background: white;
        color: var(--accent);
        padding: 0.5rem 1rem;
        border-radius: 8px;
        text-decoration: none;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-weight: 500;
        transition: transform 0.2s ease;
    }

    .certificate-link:hover {
        transform: scale(1.05);
    }

    .certificate-content {
        padding: 1.5rem;
    }

    .certificate-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 0.5rem;
    }

    .certificate-title {
        font-size: 1.2rem;
        color: var(--text);
        margin: 0;
        font-weight: 600;
        white-space: pre-line;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
        text-overflow: ellipsis;
        line-height: 1.3;
    }

    .certificate-type {
        background: var(--accent-light);
        color: var(--accent);
        padding: 0.25rem 0.75rem;
        border-radius: 12px;
        font-size: 0.8rem;
        font-weight: 500;
    }

    .certificate-issuer {
        color: var(--accent);
        font-weight: 500;
        margin-bottom: 0.5rem;
    }

    .certificate-description {
        color: var(--text-muted);
        font-size: 0.9rem;
        line-height: 1.5;
        margin-bottom: 1rem;
        white-space: pre-line;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .certificate-meta {
        display: flex;
        gap: 1rem;
        margin-bottom: 1rem;
        font-size: 0.8rem;
    }

    .certificate-date,
    .certificate-category {
        color: var(--text-muted);
        display: flex;
        align-items: center;
        gap: 0.25rem;
    }

    .certificate-skills {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        margin-bottom: 1rem;
    }

    .skill-tag {
        background: var(--accent-light);
        color: var(--accent);
        padding: 0.25rem 0.5rem;
        border-radius: 12px;
        font-size: 0.75rem;
        font-weight: 500;
    }

    .skill-ellipsis {
        color: var(--text-muted);
        font-size: 0.75rem;
        font-weight: 500;
        margin-left: 0.25rem;
        font-style: italic;
    }

    .certificate-id {
        color: var(--text-secondary);
        font-size: 0.75rem;
    }

    .no-results {
        text-align: center;
        padding: 3rem;
        color: var(--text-muted);
    }

    .no-results i {
        font-size: 3rem;
        margin-bottom: 1rem;
        color: var(--accent);
    }

    .no-results h3 {
        margin-bottom: 0.5rem;
        color: var(--text);
    }

    /* Modal Styles */
    .modal {
        display: none;
        position: fixed;
        z-index: 9999;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.8);
        backdrop-filter: blur(5px);
        -webkit-backdrop-filter: blur(5px);
        opacity: 0;
        visibility: hidden;
        transition: opacity 0.3s ease, visibility 0.3s ease;
    }

    .modal.show {
        display: block;
        opacity: 1;
        visibility: visible;
    }

    .modal-content {
        background: var(--background);
        margin: 2% auto;
        padding: 0;
        border-radius: 16px;
        width: 90%;
        max-width: 900px;
        max-height: 90vh;
        overflow-y: auto;
        position: relative;
        animation: modalSlideIn 0.3s ease-out;
    }

    @keyframes modalSlideIn {
        from {
            opacity: 0;
            transform: translateY(-50px) scale(0.95);
        }
        to {
            opacity: 1;
            transform: translateY(0) scale(1);
        }
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1.5rem 2rem;
        border-bottom: 1px solid var(--border);
        background: var(--card-bg);
        border-radius: 16px 16px 0 0;
    }

    .modal-header h2 {
        color: var(--text);
        margin: 0;
        font-size: 1.5rem;
    }

    .close-btn {
        background: none;
        border: none;
        color: var(--text-muted);
        font-size: 1.5rem;
        cursor: pointer;
        padding: 0.5rem;
        border-radius: 50%;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 40px;
        height: 40px;
    }

    .close-btn:hover {
        background: var(--accent-light);
        color: var(--accent);
        transform: scale(1.1);
    }

    .modal-body {
        display: grid;
        grid-template-columns: 300px 1fr;
        gap: 2rem;
        padding: 2rem;
    }

    .modal-image {
        position: sticky;
        top: 2rem;
    }

    .modal-image img {
        width: 100%;
        border-radius: 12px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
    }

    .modal-info {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
    }

    .info-section h3 {
        color: var(--accent);
        margin-bottom: 1rem;
        font-size: 1.2rem;
        border-bottom: 2px solid var(--accent-light);
        padding-bottom: 0.5rem;
    }

    .info-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1rem;
    }

    .info-item {
        display: flex;
        flex-direction: column;
        gap: 0.25rem;
    }

    .info-item strong {
        color: var(--text);
        font-size: 0.9rem;
    }

    .info-item span {
        color: var(--text-muted);
    }

    .skills-container {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
    }

    .credential-link {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        color: var(--accent);
        text-decoration: none;
        margin-top: 0.5rem;
        transition: color 0.3s ease;
    }

    .title {
        font-size: 3rem;
        margin-bottom: 3rem;
        color: var(--accent);
        text-align: center;
    }

    .certificates-counter {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        background: var(--background-glass);
        backdrop-filter: var(--glass-blur);
        -webkit-backdrop-filter: var(--glass-blur);
        border: 1px solid var(--border);
        border-radius: 50px;
        padding: 0.75rem 1.5rem;
        color: var(--text-secondary);
        font-size: 0.9rem;
        box-shadow: var(--glass-shadow);
        margin-bottom: 2rem;
        margin-left: 50%;
        transform: translateX(-50%);
    }

    .certificates-counter i {
        color: var(--accent);
    }

    /* Estilos de Paginación */
    .pagination-container {
        margin-top: 4rem;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 1rem;
    }

    .pagination-info {
        text-align: center;
    }

    .pagination-text {
        color: var(--text-secondary);
        font-size: 0.9rem;
        background: var(--background-glass);
        backdrop-filter: var(--glass-blur);
        -webkit-backdrop-filter: var(--glass-blur);
        border: 1px solid var(--border);
        border-radius: 20px;
        padding: 0.5rem 1rem;
        box-shadow: var(--glass-shadow);
    }

    .pagination {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        background: var(--background-glass);
        backdrop-filter: var(--glass-blur);
        -webkit-backdrop-filter: var(--glass-blur);
        border: 1px solid var(--border);
        border-radius: 50px;
        padding: 0.5rem;
        box-shadow: var(--glass-shadow);
    }

    .pagination-btn {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.75rem 1rem;
        background: transparent;
        color: var(--text);
        text-decoration: none;
        border-radius: 25px;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        font-weight: 500;
        border: 1px solid transparent;
    }

    .pagination-btn:hover {
        background: var(--accent-light);
        color: var(--accent);
        border-color: var(--accent-glow);
        transform: translateY(-2px);
    }

    .pagination-numbers {
        display: flex;
        align-items: center;
        gap: 0.25rem;
    }

    .pagination-number {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 40px;
        height: 40px;
        background: transparent;
        color: var(--text);
        text-decoration: none;
        border-radius: 50%;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        font-weight: 500;
        border: 1px solid transparent;
    }

    .pagination-number:hover {
        background: var(--accent-light);
        color: var(--accent);
        border-color: var(--accent-glow);
        transform: scale(1.1);
    }

    .pagination-number.active {
        background: var(--accent);
        color: white;
        border-color: var(--accent);
        box-shadow: 0 0 20px var(--accent-glow);
    }

    .credential-link:hover {
        color: var(--accent-hover);
    }

    .modal-footer {
        padding: 1.5rem 2rem;
        border-top: 1px solid var(--border);
        background: var(--card-bg);
        border-radius: 0 0 16px 16px;
    }

    .modal-actions {
        display: flex;
        gap: 1rem;
        justify-content: flex-end;
        flex-wrap: wrap;
    }

    .modal-actions .btn {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    /* Modal de Imagen Ampliada */
    .image-modal {
        display: none;
        position: fixed;
        z-index: 10000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.9);
        backdrop-filter: blur(10px);
        -webkit-backdrop-filter: blur(10px);
        opacity: 0;
        visibility: hidden;
        transition: opacity 0.3s ease, visibility 0.3s ease;
    }

    .image-modal.show {
        display: block;
        opacity: 1;
        visibility: visible;
    }

    .image-modal-content {
        position: relative;
        margin: auto;
        padding: 0;
        width: 90%;
        height: 90%;
        display: flex;
        align-items: center;
        justify-content: center;
        animation: imageModalSlideIn 0.3s ease-out;
    }

    @keyframes imageModalSlideIn {
        from {
            opacity: 0;
            transform: scale(0.8);
        }
        to {
            opacity: 1;
            transform: scale(1);
        }
    }

    .image-modal-content img {
        max-width: 100%;
        max-height: 100%;
        width: auto;
        height: auto;
        object-fit: contain;
        border-radius: 8px;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.5);
        transition: transform 0.3s ease;
    }

    .image-modal-content img:hover {
        transform: scale(1.02);
    }

    .image-modal-close {
        position: absolute;
        top: 20px;
        right: 35px;
        color: white;
        font-size: 40px;
        font-weight: bold;
        cursor: pointer;
        z-index: 10001;
        transition: all 0.3s ease;
        background: rgba(0, 0, 0, 0.5);
        border-radius: 50%;
        width: 50px;
        height: 50px;
        display: flex;
        align-items: center;
        justify-content: center;
        line-height: 1;
    }

    .image-modal-close:hover {
        color: var(--accent);
        background: rgba(255, 255, 255, 0.1);
        transform: scale(1.1);
    }

    .modal-image-clickable {
        cursor: pointer;
        transition: transform 0.3s ease;
    }

    .modal-image-clickable:hover {
        transform: scale(1.05);
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    }

    @media (max-width: 768px) {
        .certificates {
            padding: 1rem;
            padding-top: 3rem;
        }

        .filters {
            flex-direction: column;
            align-items: stretch;
        }

        .filter-group {
            min-width: auto;
        }

        .certificates-grid {
            grid-template-columns: 1fr;
        }

        .certificate-image {
            height: 160px;
        }

        .certificate-meta {
            flex-direction: column;
            gap: 0.5rem;
        }

        .modal-content {
            width: 95%;
            margin: 5% auto;
        }

        .modal-body {
            grid-template-columns: 1fr;
            gap: 1.5rem;
        }

        .modal-image {
            position: static;
        }

        .info-grid {
            grid-template-columns: 1fr;
        }

        .modal-actions {
            flex-direction: column;
        }

        .modal-actions .btn {
            width: 100%;
            justify-content: center;
        }

        .title {
            font-size: 2rem;
            margin-top: 1rem;
            margin-bottom: 1rem;
            color: var(--accent);
            text-align: center;
        }

        .image-modal-content {
            width: 95%;
            height: 95%;
        }

        .image-modal-close {
            top: 10px;
            right: 20px;
            font-size: 30px;
            width: 40px;
            height: 40px;
        }

    }
</style>

<script define:vars={{ certificatesDataJSON: JSON.stringify(certificatesData) }}>
    // Datos de certificados desde el servidor
    const certificatesData = JSON.parse(certificatesDataJSON);
    const ITEMS_PER_PAGE = 6;
    let currentPage = 1;
    let totalPages = Math.ceil(certificatesData.length / ITEMS_PER_PAGE);
    let filteredCertificates = certificatesData;

    // Función para escapar caracteres especiales en JSON
    function escapeForJSON(str) {
        if (!str) return '';
        return str
            .replace(/\\/g, '\\\\')  // Escapar backslashes
            .replace(/"/g, '\\"')    // Escapar comillas dobles
            .replace(/\n/g, '\\n')   // Escapar saltos de línea
            .replace(/\r/g, '\\r')   // Escapar retornos de carro
            .replace(/\t/g, '\\t');  // Escapar tabs
    }

    // Función para escapar recursivamente todos los strings de un objeto
    function escapeObjectForJSON(obj) {
        if (typeof obj === 'string') {
            return escapeForJSON(obj);
        } else if (Array.isArray(obj)) {
            return obj.map(item => escapeObjectForJSON(item));
        } else if (obj && typeof obj === 'object') {
            const escaped = {};
            for (const key in obj) {
                escaped[key] = escapeObjectForJSON(obj[key]);
            }
            return escaped;
        }
        return obj;
    }

    // Función para truncar texto a 2 líneas
    function truncateText(text, maxLines = 2) {
        if (!text) return '';
        const lines = text.split('\n');
        if (lines.length <= maxLines) {
            return text;
        }
        return lines.slice(0, maxLines).join('\n') + '...';
    }

    // Función para truncar array a 1 elemento
    function truncateArray(arr, maxItems = 1) {
        if (!arr || arr.length <= maxItems) {
            return arr;
        }
        return arr.slice(0, maxItems);
    }

    // Función para crear HTML de un certificado
    function createCertificateCard(cert) {
        const currentLocale = document.documentElement.getAttribute('data-locale') || 'es';
        const isSpanish = currentLocale === 'es';
        
        const title = isSpanish ? (cert.title_es || cert.title) : cert.title;
        const description = isSpanish ? (cert.description_es || cert.description) : cert.description;
        const issuer = isSpanish ? (cert.issuer_es || cert.issuer) : cert.issuer;
        const category = isSpanish ? (cert.category_es || cert.category) : cert.category;
        const categoryArray = Array.isArray(category) ? category : [category];
        const categoryDisplay = categoryArray.join(', ');
        const type = isSpanish ? 
            (cert.type_es || 
                (cert.type === 'professional-certificate' ? 'Certificado Profesional' : 'Certificación')) : 
            (cert.type === 'professional-certificate' ? 'Professional Certificate' : 'Certification');
        
        // Truncar título a 2 líneas
        const truncatedTitle = truncateText(title);
        
        // Truncar descripción a 2 líneas
        const truncatedDescription = truncateText(description);
        
        // Truncar habilidades a 1 elemento
        const truncatedSkills = truncateArray(cert.skills);
        const skills = truncatedSkills.map(skill => `<span class="skill-tag">${skill}</span>`).join('');
        const skillsEllipsis = cert.skills.length > 1 ? '<span class="skill-ellipsis">...</span>' : '';
        
        const credentialId = cert.credential_id ? `<div class="certificate-id"><small>ID: ${cert.credential_id}</small></div>` : '';

        // Crear una copia del certificado con todos los strings escapados para JSON
        const escapedCert = escapeObjectForJSON(cert);

        return `
            <div class="certificate-card" 
                 data-category="${Array.isArray(cert.category) ? cert.category.join(',') : cert.category}"
                 data-type="${cert.type}"
                 data-skills="${cert.skills.join(',')}"
                 data-certificate="${JSON.stringify(escapedCert).replace(/"/g, '&quot;')}">
                
                <div class="certificate-image">
                    <img src="${cert.image}" alt="${title}" />
                    <div class="certificate-overlay">
                        <div class="certificate-actions">
                            <button class="certificate-link" type="button">
                                <i class="fas fa-eye"></i>
                                <span class="view-details-text">Ver Detalles</span>
                            </button>
                        </div>
                    </div>
                </div>
                
                <div class="certificate-content">
                    <div class="certificate-header">
                        <h3 class="certificate-title" data-cert-title="${cert.title}" data-cert-title-es="${cert.title_es || cert.title}">${truncatedTitle}</h3>
                        <span class="certificate-type" data-cert-type="${cert.type}" data-cert-type-es="${cert.type_es || (cert.type === 'degree' ? 'Título' : 'Certificación')}">
                            ${type}
                        </span>
                    </div>
                    
                    <p class="certificate-issuer" data-cert-issuer="${cert.issuer}" data-cert-issuer-es="${cert.issuer_es || cert.issuer}">${issuer}</p>
                    <p class="certificate-description" data-cert-description="${cert.description}" data-cert-description-es="${cert.description_es || cert.description}">${truncatedDescription}</p>
                    
                    <div class="certificate-meta">
                        <span class="certificate-date" data-cert-date="${cert.date}">
                            <i class="fas fa-calendar"></i>
                            ${new Date(cert.date).toLocaleDateString(isSpanish ? 'es-ES' : 'en-US', { 
                                year: 'numeric', 
                                month: 'long' 
                            })}
                        </span>
                        <span class="certificate-category" data-cert-category="${Array.isArray(cert.category) ? cert.category.join(',') : cert.category}" data-cert-category-es="${Array.isArray(cert.category_es) ? cert.category_es.join(',') : (cert.category_es || cert.category)}">
                            <i class="fas fa-tag"></i>
                            ${categoryDisplay}
                        </span>
                    </div>
                    
                    <div class="certificate-skills">
                        ${skills}
                        ${skillsEllipsis}
                    </div>
                    
                    ${credentialId}
                </div>
            </div>
        `;
    }

    // Función para renderizar certificados
    function renderCertificates() {
        const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;
        const endIndex = startIndex + ITEMS_PER_PAGE;
        const currentCertificates = filteredCertificates.slice(startIndex, endIndex);

        // Actualizar contador
        const counterElement = document.getElementById('certificatesCounter');
        if (counterElement) {
            counterElement.textContent = `Mostrando ${currentCertificates.length} de ${filteredCertificates.length} certificados`;
        }

        // Renderizar certificados
        const certificatesGrid = document.getElementById('certificatesGrid');
        if (certificatesGrid) {
            certificatesGrid.innerHTML = currentCertificates.map(createCertificateCard).join('');
            // No necesitamos agregar event listeners aquí porque usamos event delegation
        }

        // Actualizar paginación
        updatePagination();
    }

    // Función para actualizar paginación
    function updatePagination() {
        const paginationContainer = document.getElementById('paginationContainer');
        const paginationInfo = document.getElementById('paginationInfo');
        const paginationNumbers = document.getElementById('paginationNumbers');

        const totalFilteredPages = Math.ceil(filteredCertificates.length / ITEMS_PER_PAGE);

        if (totalFilteredPages > 1 && paginationContainer && paginationInfo && paginationNumbers) {
            paginationContainer.style.display = 'flex';
            paginationInfo.textContent = `Página ${currentPage} de ${totalFilteredPages}`;
            
            let paginationHTML = '';
            
            // Botón anterior
            if (currentPage > 1) {
                paginationHTML += `<a href="#" class="pagination-btn prev" onclick="goToPage(${currentPage - 1})" aria-label="Página anterior"><i class="fas fa-chevron-left"></i><span>Anterior</span></a>`;
            }
            
            // Números de página
            for (let i = 1; i <= totalFilteredPages; i++) {
                const activeClass = i === currentPage ? 'active' : '';
                paginationHTML += `<a href="#" class="pagination-number ${activeClass}" onclick="goToPage(${i})" aria-label="Página ${i}">${i}</a>`;
            }
            
            // Botón siguiente
            if (currentPage < totalFilteredPages) {
                paginationHTML += `<a href="#" class="pagination-btn next" onclick="goToPage(${currentPage + 1})" aria-label="Página siguiente"><span>Siguiente</span><i class="fas fa-chevron-right"></i></a>`;
            }
            
            paginationNumbers.innerHTML = paginationHTML;
        } else if (paginationContainer) {
            paginationContainer.style.display = 'none';
        }
    }

    // Función para ir a una página específica
    function goToPage(page) {
        const totalFilteredPages = Math.ceil(filteredCertificates.length / ITEMS_PER_PAGE);
        if (page >= 1 && page <= totalFilteredPages) {
            currentPage = page;
            renderCertificates();
            
            // Scroll suave hacia arriba
            const certificatesElement = document.querySelector('.certificates');
            if (certificatesElement) {
                certificatesElement.scrollIntoView({ 
                    behavior: 'smooth',
                    block: 'start'
                });
            }
        }
    }

    // Funciones globales para el modal
    function openCertificateModal(element) {
        console.log('Opening certificate modal for:', element);
        
        if (!element || !element.dataset.certificate) {
            console.error('Element or certificate data not found');
            return;
        }
        
        // Debug: mostrar el JSON antes de parsearlo
        console.log('Raw JSON string:', element.dataset.certificate);
        console.log('JSON length:', element.dataset.certificate.length);
        console.log('Character at position 311:', element.dataset.certificate.charAt(311));
        console.log('Characters around position 311:', element.dataset.certificate.substring(305, 320));
        
        // Convertir entidades HTML de vuelta a comillas
        const jsonString = element.dataset.certificate.replace(/&quot;/g, '"');
        console.log('Converted JSON string:', jsonString);
        
        try {
            const certificateData = JSON.parse(jsonString);
            console.log('JSON parsed successfully:', certificateData);
        } catch (error) {
            console.error('JSON parse error:', error);
            console.error('Problematic JSON:', jsonString);
            return;
        }
        
        const certificateData = JSON.parse(jsonString);
        const modal = document.getElementById('certificateModal');
        
        if (!modal) {
            console.error('Modal element not found');
            return;
        }
        
        // Obtener idioma actual
        const currentLocale = document.documentElement.getAttribute('data-locale') || 'es';
        const isSpanish = currentLocale === 'es';
        
        // Función para desescapar strings
        function unescapeString(str) {
            if (!str) return '';
            return str
                .replace(/\\n/g, '\n')
                .replace(/\\r/g, '\r')
                .replace(/\\t/g, '\t')
                .replace(/\\"/g, '"')
                .replace(/\\\\/g, '\\');
        }

        // Función para desescapar recursivamente todos los strings de un objeto
        function unescapeObject(obj) {
            if (typeof obj === 'string') {
                return unescapeString(obj);
            } else if (Array.isArray(obj)) {
                return obj.map(item => unescapeObject(item));
            } else if (obj && typeof obj === 'object') {
                const unescaped = {};
                for (const key in obj) {
                    unescaped[key] = unescapeObject(obj[key]);
                }
                return unescaped;
            }
            return obj;
        }

        // Desescapar todos los datos del certificado
        const unescapedData = unescapeObject(certificateData);

        // Llenar información básica con traducciones
        const title = isSpanish ? 
            (unescapedData.title_es || unescapedData.title) : 
            unescapedData.title;
        const description = isSpanish ? 
            (unescapedData.description_es || unescapedData.description) : 
            unescapedData.description;
        const issuer = isSpanish ? 
            (unescapedData.issuer_es || unescapedData.issuer) : 
            unescapedData.issuer;
        const category = isSpanish ? 
            (Array.isArray(unescapedData.category_es) ? unescapedData.category_es.join(', ') : (unescapedData.category_es || unescapedData.category)) : 
            (Array.isArray(unescapedData.category) ? unescapedData.category.join(', ') : unescapedData.category);
        const type = isSpanish ? 
            (unescapedData.type_es || 
                (unescapedData.type === 'professional-certificate' ? 'Certificado Profesional' : 'Certificación')) : 
            (unescapedData.type === 'professional-certificate' ? 'Professional Certificate' : 'Certification');

        document.getElementById('modalTitle').textContent = title;
        document.getElementById('modalImage').src = unescapedData.image;
        document.getElementById('modalImage').alt = title;
        document.getElementById('modalIssuer').textContent = issuer;
        document.getElementById('modalDate').textContent = new Date(unescapedData.date).toLocaleDateString(isSpanish ? 'es-ES' : 'en-US', { 
            year: 'numeric', 
            month: 'long',
            day: 'numeric'
        });
        document.getElementById('modalCategory').textContent = category;
        document.getElementById('modalType').textContent = type;
        document.getElementById('modalDescription').textContent = description;
        
        // Mostrar/ocultar duración y horas con traducciones
        if (unescapedData.duration) {
            document.getElementById('modalDuration').style.display = 'flex';
            const duration = isSpanish ? 
                (unescapedData.duration_es || unescapedData.duration) : 
                unescapedData.duration;
            document.getElementById('modalDurationValue').textContent = duration;
        } else {
            document.getElementById('modalDuration').style.display = 'none';
        }
        
        if (unescapedData.study_hours) {
            document.getElementById('modalHours').style.display = 'flex';
            const studyHours = isSpanish ? 
                (unescapedData.study_hours_es || unescapedData.study_hours) : 
                unescapedData.study_hours;
            document.getElementById('modalHoursValue').textContent = studyHours;
        } else {
            document.getElementById('modalHours').style.display = 'none';
        }
        
        // Contenido estudiado con traducciones
        const contentToShow = isSpanish ? 
            (unescapedData.content_covered_es || unescapedData.content_covered) : 
            unescapedData.content_covered;
            
        if (contentToShow && contentToShow.length > 0) {
            document.getElementById('modalContent').style.display = 'block';
            const contentList = document.getElementById('modalContentList');
            contentList.innerHTML = '';
            contentToShow.forEach(item => {
                const li = document.createElement('li');
                li.textContent = item;
                contentList.appendChild(li);
            });
        } else {
            document.getElementById('modalContent').style.display = 'none';
        }
        
        // Resultados de aprendizaje con traducciones
        const outcomesToShow = isSpanish ? 
            (unescapedData.learning_outcomes_es || unescapedData.learning_outcomes) : 
            unescapedData.learning_outcomes;
            
        if (outcomesToShow && outcomesToShow.length > 0) {
            document.getElementById('modalOutcomes').style.display = 'block';
            const outcomesList = document.getElementById('modalOutcomesList');
            outcomesList.innerHTML = '';
            outcomesToShow.forEach(item => {
                const li = document.createElement('li');
                li.textContent = item;
                outcomesList.appendChild(li);
            });
        } else {
            document.getElementById('modalOutcomes').style.display = 'none';
        }
        
        // Habilidades
        const skillsContainer = document.getElementById('modalSkills');
        skillsContainer.innerHTML = '';
        unescapedData.skills.forEach(skill => {
            const span = document.createElement('span');
            span.className = 'skill-tag';
            span.textContent = skill;
            skillsContainer.appendChild(span);
        });
        
        // Credencial
        if (unescapedData.credential_id) {
            document.getElementById('modalCredential').style.display = 'block';
            document.getElementById('modalCredentialId').textContent = unescapedData.credential_id;
            
            if (unescapedData.credential_url) {
                const credentialLink = document.getElementById('modalCredentialLink');
                credentialLink.href = unescapedData.credential_url;
                credentialLink.style.display = 'inline-flex';
            } else {
                document.getElementById('modalCredentialLink').style.display = 'none';
            }
        } else {
            document.getElementById('modalCredential').style.display = 'none';
        }
        
        // Enlaces del footer
        if (unescapedData.pdf_url) {
            document.getElementById('modalPdfLink').href = unescapedData.pdf_url;
            document.getElementById('modalPdfLink').style.display = 'flex';
        } else {
            document.getElementById('modalPdfLink').style.display = 'none';
        }
        
        if (unescapedData.credential_url) {
            document.getElementById('modalCredentialLinkFooter').href = unescapedData.credential_url;
            document.getElementById('modalCredentialLinkFooter').style.display = 'flex';
        } else {
            document.getElementById('modalCredentialLinkFooter').style.display = 'none';
        }
        
        // Mostrar modal
        modal.style.display = 'block';
        setTimeout(() => {
            modal.classList.add('show');
        }, 10);
        document.body.style.overflow = 'hidden';

        // Agregar event listener para la imagen del modal
        const modalImage = document.getElementById('modalImage');
        if (modalImage) {
            // Remover listener anterior si existe
            modalImage.removeEventListener('click', modalImage._imageClickHandler);
            
            // Crear nuevo handler con los datos actuales
            modalImage._imageClickHandler = function() {
                openImageModal(unescapedData.image, unescapedData.title);
            };
            
            // Agregar el nuevo listener
            modalImage.addEventListener('click', modalImage._imageClickHandler);
        }
        
        // Cerrar modal al hacer clic fuera del contenido (solo si no tiene el listener)
        if (!modal.hasAttribute('data-click-listener')) {
            modal.addEventListener('click', function(e) {
                if (e.target === modal) {
                    closeCertificateModal();
                }
            });
            modal.setAttribute('data-click-listener', 'true');
        }
    }
    
    function closeCertificateModal() {
        const modal = document.getElementById('certificateModal');
        if (modal) {
            modal.classList.remove('show');
            setTimeout(() => {
                modal.style.display = 'none';
            }, 300);
            document.body.style.overflow = 'auto';
        }
    }

    // Funciones para el modal de imagen ampliada
    function openImageModal(imageSrc, imageAlt) {
        const imageModal = document.getElementById('imageModal');
        const expandedImage = document.getElementById('expandedImage');
        
        if (imageModal && expandedImage) {
            expandedImage.src = imageSrc;
            expandedImage.alt = imageAlt;
            imageModal.style.display = 'block';
            setTimeout(() => {
                imageModal.classList.add('show');
            }, 10);
            document.body.style.overflow = 'hidden';
        }
    }

    function closeImageModal() {
        const imageModal = document.getElementById('imageModal');
        if (imageModal) {
            imageModal.classList.remove('show');
            setTimeout(() => {
                imageModal.style.display = 'none';
            }, 300);
            document.body.style.overflow = 'auto';
        }
    }

    // Hacer las funciones globalmente accesibles
    window.openCertificateModal = openCertificateModal;
    window.closeCertificateModal = closeCertificateModal;
    window.openImageModal = openImageModal;
    window.closeImageModal = closeImageModal;

    document.addEventListener('DOMContentLoaded', function() {
        const categoryFilter = document.getElementById('categoryFilter');
        const typeFilter = document.getElementById('typeFilter');
        const issuerFilter = document.getElementById('issuerFilter');
        const skillFilter = document.getElementById('skillFilter');
        const clearFilters = document.getElementById('clearFilters');
        const certificatesGrid = document.getElementById('certificatesGrid');
        const noResults = document.getElementById('noResults');
        
        // Event listeners para botones de cerrar modal
        const closeButtons = document.querySelectorAll('.close-btn, .close-modal-btn');
        closeButtons.forEach(button => {
            button.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                closeCertificateModal();
            });
        });
        
        // Cerrar modal con tecla Escape
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                const modal = document.getElementById('certificateModal');
                const imageModal = document.getElementById('imageModal');
                if (modal && modal.style.display === 'block') {
                    closeCertificateModal();
                } else if (imageModal && imageModal.style.display === 'block') {
                    closeImageModal();
                }
            }
        });

        // Event listeners para el modal de imagen ampliada
        const imageModal = document.getElementById('imageModal');
        const imageModalClose = document.querySelector('.image-modal-close');
        
        if (imageModalClose) {
            imageModalClose.addEventListener('click', closeImageModal);
        }
        
        if (imageModal) {
            imageModal.addEventListener('click', function(e) {
                if (e.target === imageModal) {
                    closeImageModal();
                }
            });
        }
        
        // Event delegation para los certificados - esto funciona incluso después de regenerar el HTML
        if (certificatesGrid) {
            certificatesGrid.addEventListener('click', function(e) {
                // Si se hace clic en el botón "Ver Detalles"
                if (e.target.closest('.certificate-link')) {
                    e.preventDefault();
                    e.stopPropagation();
                    const card = e.target.closest('.certificate-card');
                    if (card) {
                        console.log('Button clicked! Opening modal...');
                        openCertificateModal(card);
                    }
                }
                // Si se hace clic en la tarjeta (pero no en el botón)
                else if (e.target.closest('.certificate-card')) {
                    const card = e.target.closest('.certificate-card');
                    if (card && !e.target.closest('.certificate-link')) {
                        console.log('Card clicked! Opening modal...');
                        openCertificateModal(card);
                    }
                }
            });
        }

        function filterCertificates() {
            const selectedCategory = categoryFilter.value;
            const selectedType = typeFilter.value;
            const selectedIssuer = issuerFilter.value;
            const selectedSkill = skillFilter.value;

            // Filtrar certificados
            filteredCertificates = certificatesData.filter(cert => {
                const categoryMatch = !selectedCategory || (Array.isArray(cert.category) ? cert.category.includes(selectedCategory) : cert.category === selectedCategory);
                const typeMatch = !selectedType || cert.type === selectedType;
                const issuerMatch = !selectedIssuer || cert.issuer === selectedIssuer;
                const skillMatch = !selectedSkill || cert.skills.includes(selectedSkill);
                
                return categoryMatch && typeMatch && issuerMatch && skillMatch;
            });

            // Resetear a la primera página
            currentPage = 1;

            if (filteredCertificates.length === 0) {
                noResults.style.display = 'block';
                certificatesGrid.style.display = 'none';
                paginationContainer.style.display = 'none';
            } else {
                noResults.style.display = 'none';
                certificatesGrid.style.display = 'grid';
                renderCertificates();
            }
        }

        function clearAllFilters() {
            categoryFilter.value = '';
            typeFilter.value = '';
            issuerFilter.value = '';
            skillFilter.value = '';
            filteredCertificates = certificatesData;
            currentPage = 1;
            renderCertificates();
        }

        categoryFilter.addEventListener('change', filterCertificates);
        typeFilter.addEventListener('change', filterCertificates);
        issuerFilter.addEventListener('change', filterCertificates);
        skillFilter.addEventListener('change', filterCertificates);
        clearFilters.addEventListener('click', clearAllFilters);
        
        // Inicializar la página
        renderCertificates();
        
        // Hacer las funciones globales para los onclick
        window.goToPage = goToPage;
    });
</script>

